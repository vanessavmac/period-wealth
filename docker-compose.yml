version: "3"
services:
  dev-db:
    container_name: pw_psql
    image: postgres:13
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_PASSWORD
      - POSTGRES_DB=$DB_NAME
      - TZ='GMT-5'
      - PGTZ='GMT-5'
    ports:
      - $DB_PORT:$DB_PORT
    volumes:
      # Mapping between container's internal postgres data directory to local machine
      - ./server/db/data:/var/lib/postgresql/data
    restart: always
    command: -p $DB_PORT
  dev-api:
    container_name: pw_api
    depends_on:
      - dev-db
    build: ./server
    environment:
      - NODE_ENV=$API_NODE_ENV
      - PORT=$API_PORT # connect to db container using node-postgres and docker-compose orchestration
      - PGHOST=dev-db
      - PGPORT=$DB_PORT
      - PGUSER=$DB_USER
      - PGPASSWORD=$DB_PASSWORD
      - PGDATABASE=$DB_NAME
      - TZ='GMT-5'
      - PGTZ='GMT-5'
    ports:
      - $API_PORT:$API_PORT
    volumes:
      # mounts a name volume to container's internal /periodwealth dir to src files for hot-reloading
      - ./server:/periodwealth
      # overwrites and mounts volume to save node_modules to container
      - ./server/node_modules:/periodwealth/node_modules
  # pw-app:
  #   container_name: pw_app
  #   build: ./app
  #   environment:
  #     - NODE_ENV=$UI_NODE_ENV
  #     - PORT=$UI_PORT
  #     - REACT_APP_API_HOST=$REACT_APP_API_HOST
  #   # Difference between ports and expose: https://stackoverflow.com/questions/40801772/what-is-the-difference-between-ports-and-expose-in-docker-compose
  #   ports:
  #     - $UI_PORT:$UI_PORT
  #   volumes:
  #     - ./app:/periodwealth
  #     - ./app/node_modules:/periodwealth/node_modules
  #   # You use stdin_open when you need to work on a project outside the Docker container.
  #   # To test this out, try running docker-compose up with either tty or stdin_open but not both and you'll find that with stdin_open you don't log in to the container's terminal while the opposite happens with tty.
  #   stdin_open: true